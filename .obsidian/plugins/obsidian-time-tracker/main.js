/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
https://github.com/daaru00/obsidian-time-tracker/
*/

'use strict';

var os = require('os');
var obsidian = require('obsidian');

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n["default"] = e;
    return Object.freeze(n);
}

var os__namespace = /*#__PURE__*/_interopNamespace(os);

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

obsidian.addIcon('time-tracker-play', `
<g
   id="g4"
   transform="matrix(0.80313764,0,0,0.80313764,-1.3691584e-4,-1.3691584e-4)">
	<path
   style="fill:currentColor;fill-opacity: 0;stroke-width: 8;stroke: currentColor;"
   d="m 113.956,57.006 -97.4,-56.2 c -4,-2.3 -9,0.6 -9,5.2 v 112.5 c 0,4.6 5,7.5 9,5.2 l 97.4,-56.2 c 4,-2.401 4,-8.2 0,-10.5 z"
   id="path2"/>
</g>
`);
obsidian.addIcon('time-tracker-pause', `
<g
   id="g6"
   transform="scale(0.36057086)">
	<path
   style="fill:currentColor;fill-opacity: 0;stroke-width: 14;stroke: currentColor;"
   d="m 14.22,45.665 v 186.013 c 0,25.223 16.711,45.66 37.327,45.66 20.618,0 37.339,-20.438 37.339,-45.66 V 45.665 C 88.886,20.454 72.165,0.008 51.547,0.008 30.931,0 14.22,20.454 14.22,45.665 Z"
   id="path2"/>
	<path
   style="fill:currentColor;fill-opacity: 0;stroke-width: 14;stroke: currentColor;"
   d="M 225.78,0 C 205.166,0 188.455,20.446 188.455,45.657 V 231.67 c 0,25.223 16.711,45.652 37.325,45.652 20.614,0 37.338,-20.43 37.338,-45.652 V 45.665 C 263.109,20.454 246.394,0 225.78,0 Z"
   id="path4"/>
</g>
`);
obsidian.addIcon('time-tracker-resume', `
<g
   id="g14"
   transform="matrix(2.1750952,0,0,2.1750952,0.00108664,-9.1e-7)">
	<g
   id="g12">
		<g
   id="g4">
			<path
       style="fill:currentColor;fill-opacity: 0;stroke-width: 3;stroke: currentColor;"
   d="m 9.629,44.68 c -1.154,1.16 -2.895,1.51 -4.407,0.885 -1.513,-0.623 -2.5,-2.1 -2.5,-3.735 V 4.043 c 0,-1.637 0.987,-3.112 2.5,-3.736 1.513,-0.625 3.253,-0.275 4.407,0.885 l 17.862,17.951 c 2.088,2.098 2.088,5.488 0,7.585 z"
   id="path2"/>
		</g>
		<g
   id="g10">
			<g
   id="g8">
				<path
         style="fill:currentColor;fill-opacity: 0;stroke-width: 3;stroke: currentColor;"
   d="m 38.252,45.975 c -2.763,0 -5,-2.238 -5,-5 V 5 c 0,-2.762 2.237,-5 5,-5 2.762,0 5,2.238 5,5 v 35.975 c 0,2.761 -2.239,5 -5,5 z"
   id="path6"/>
			</g>
		</g>
	</g>
</g>
`);
obsidian.addIcon('time-tracker-stop', `
<rect style="fill:none;fill-opacity:1;stroke:currentColor;stroke-width:5.0125947;stroke-linecap:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1" id="rect825" width="89.674904" height="88.737404" x="5.1625481" y="5.6312981">
</rect>
`);

const DEFAULT_SETTINGS = {
    approximation: 0,
    pomodoroDuration: 5 * 60,
    storageFile: 'TimeTracker',
    enableStatusBar: true,
};

class TimeTrackerIssueSettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    display() {
        return __awaiter(this, void 0, void 0, function* () {
            const { containerEl } = this;
            containerEl.empty();
            new obsidian.Setting(containerEl)
                .setName('Timer approximation')
                .setDesc('Round spent time')
                .addDropdown(dropdown => dropdown
                .addOptions({
                '0': 'disabled',
                '60': '1 minute',
                '300': '5 minutes',
                '600': '10 minutes',
                '900': '15 minutes'
            })
                .setValue(this.plugin.settings.approximation.toString())
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.approximation = parseInt(value);
                yield this.plugin.saveSettings();
            })));
            new obsidian.Setting(containerEl)
                .setName('Pomodoro duration')
                .setDesc('The duration of pomodoro timer')
                .addDropdown(dropdown => dropdown
                .addOptions({
                '300': '5 minutes',
                '900': '15 minutes',
                '1500': '25 minutes',
                '1800': '30 minutes',
            })
                .setValue(this.plugin.settings.pomodoroDuration.toString())
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.pomodoroDuration = parseInt(value);
                yield this.plugin.saveSettings();
            })));
            new obsidian.Setting(containerEl)
                .setName('Storage file')
                .setDesc('The path of file used to store saved timers')
                .addText(text => text
                .setValue(this.plugin.settings.storageFile)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.storageFile = value;
                yield this.plugin.saveSettings();
            })));
            new obsidian.Setting(containerEl)
                .setName('Status bar item')
                .setDesc('Enable the status bar item for current running timer')
                .addToggle(toggle => toggle
                .setValue(this.plugin.settings.enableStatusBar)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.enableStatusBar = value;
                yield this.plugin.saveSettings();
            })));
        });
    }
}

function getTimestamp(date) {
    date = date || new Date();
    return Math.trunc(date.getTime() / 1000);
}
class Timer {
    constructor(timerManager, id) {
        this.timerManager = timerManager;
        this.id = id;
        this.startedAt = null;
        this.pausedAt = null;
        this.resumedAt = null;
        this.durationAcc = 0;
        this.tags = [];
    }
    start() {
        this.timerManager.pauseAll();
        if (this.startedAt !== null) {
            return this.resume();
        }
        this.startedAt = new Date();
        this.isRunning = true;
        this.timerManager.emit('timer-start', { timer: this });
    }
    reset() {
        this.startedAt = null;
        this.pausedAt = null;
        this.resumedAt = null;
        this.durationAcc = 0;
        this.timerManager.emit('timer-reset', { timer: this });
    }
    restart() {
        this.reset();
        this.start();
    }
    pause() {
        if (!this.isRunning) {
            return;
        }
        // timer was already paused at least once
        if (this.pausedAt !== null) {
            this.updateDurationAccumulator();
        }
        this.pausedAt = new Date();
        this.isRunning = false;
        this.timerManager.emit('timer-paused', { timer: this });
    }
    save() {
        this.pause();
        this.timerManager.emit('timer-saved', { timer: this });
    }
    resume() {
        this.timerManager.pauseAll();
        if (this.isRunning) {
            return;
        }
        // timer was already resumed at least once
        if (this.resumedAt !== null) {
            this.updateDurationAccumulator();
        }
        this.resumedAt = new Date();
        this.isRunning = true;
        this.timerManager.emit('timer-resumed', { timer: this });
    }
    updateDurationAccumulator() {
        this.durationAcc = this.getDuration();
    }
    getFormattedDurationObject(seconds) {
        const parts = this.getFormattedDurationString(seconds).split(':');
        return {
            hours: parseInt(parts[0]),
            minutes: parseInt(parts[1]),
            seconds: parseInt(parts[2])
        };
    }
    getFormattedDurationString(seconds) {
        seconds = seconds || this.getDuration();
        return (new Date(seconds * 1000)).toISOString().substr(11, 8);
    }
    forceDuration(seconds) {
        if (this.isRunning) {
            this.pause();
        }
        this.durationAcc = seconds;
        this.resumedAt = this.pausedAt;
    }
    getApproximatedDuration(seconds) {
        let duration = this.getDuration();
        if (seconds === 0) {
            return duration;
        }
        const approximationEdge = seconds / 2;
        const leftHours = duration % seconds;
        if (leftHours < approximationEdge) {
            duration = duration - leftHours;
        }
        else {
            duration = duration - leftHours + seconds;
        }
        if (duration <= 0) {
            duration = seconds;
        }
        return Math.ceil(duration);
    }
    getDuration() {
        const now = getTimestamp();
        // timer started
        if (this.startedAt !== null &&
            this.isRunning &&
            this.pausedAt === null &&
            this.resumedAt === null) {
            return now - getTimestamp(this.startedAt);
        }
        // timer paused
        if (this.startedAt !== null &&
            !this.isRunning &&
            this.pausedAt !== null &&
            this.resumedAt === null) {
            return getTimestamp(this.pausedAt) - getTimestamp(this.startedAt);
        }
        // timer resumed
        if (this.startedAt !== null &&
            this.isRunning &&
            this.pausedAt !== null &&
            this.resumedAt !== null &&
            this.durationAcc === 0) {
            return (getTimestamp(this.pausedAt) - getTimestamp(this.startedAt)) + (now - getTimestamp(this.resumedAt));
        }
        // timer paused at least once
        if (this.startedAt !== null &&
            !this.isRunning &&
            this.pausedAt !== null &&
            this.resumedAt !== null &&
            this.durationAcc > 0) {
            return this.durationAcc;
        }
        // timer resumed at least once
        if (this.startedAt !== null &&
            this.isRunning &&
            this.pausedAt !== null &&
            this.resumedAt !== null &&
            this.durationAcc > 0) {
            return this.durationAcc + (now - getTimestamp(this.resumedAt));
        }
        return 0;
    }
    setDuration(seconds) {
        const now = new Date();
        this.startedAt = now;
        this.pausedAt = now;
        this.resumedAt = now;
        this.durationAcc = seconds;
        if (this.isRunning) {
            this.resumedAt = new Date();
        }
        this.timerManager.emit('timer-edited', { timer: this });
    }
    addTag(tag) {
        this.tags.push(tag);
    }
    hasTag(tag) {
        return this.tags.indexOf(tag) !== -1;
    }
    removeTag(tag) {
        const index = this.tags.indexOf(tag);
        if (index === -1) {
            return;
        }
        this.tags.splice(index, 1);
    }
}
class TimerManager {
    constructor() {
        this.timers = [];
        this.subscriptions = new Map();
    }
    getAll() {
        return this.timers;
    }
    getRunningTimer() {
        return this.timers.find(timer => timer.isRunning);
    }
    getById(id) {
        return this.timers.find(timer => timer.id === id);
    }
    createNew(id) {
        if (this.getById(id) !== undefined) {
            throw 'Duplicated Timer Identifier';
        }
        const timer = new Timer(this, id);
        this.timers.push(timer);
        return timer;
    }
    pauseAll() {
        for (const timer of this.timers) {
            timer.pause();
        }
    }
    deleteById(id) {
        const index = this.timers.findIndex(timer => timer.id === id);
        if (index === -1) {
            throw 'Timer Identifier Not Found';
        }
        this.timers.splice(index, 1);
        this.emit('timer-deleted', { timer: { id } });
    }
    deleteAll() {
        const ids = this.timers.map(timer => timer.id);
        this.timers = [];
        for (const id of ids) {
            this.emit('timer-deleted', { timer: { id } });
        }
    }
    createNewPomodoro(id, seconds) {
        const timer = new Timer(this, id);
        timer.addTag('pomodoro');
        timer.setDuration(seconds);
        return timer;
    }
    on(event, callback) {
        if (!this.subscriptions.has(event)) {
            this.subscriptions.set(event, [callback]);
            return;
        }
        const subscriptions = this.subscriptions.get(event);
        subscriptions.push(callback);
        this.subscriptions.set(event, subscriptions);
    }
    emit(event, data = {}) {
        if (!this.subscriptions.has(event)) {
            return;
        }
        const subscriptions = this.subscriptions.get(event);
        for (const subscription of subscriptions) {
            subscription(data);
        }
    }
    dump() {
        return this.timers.map(timer => ({
            id: timer.id,
            durationAcc: timer.durationAcc,
            startedAt: timer.startedAt,
            resumedAt: timer.resumedAt,
            pausedAt: timer.pausedAt,
            isRunning: timer.isRunning,
            tags: timer.tags,
        }));
    }
    restore(timers) {
        const imported = [];
        for (const timer of timers) {
            const newTimer = new Timer(this, timer.id);
            for (const key in timer) {
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                const value = timer[key];
                switch (key) {
                    case 'durationAcc':
                        newTimer.durationAcc = parseInt(value);
                        break;
                    case 'startedAt':
                        newTimer.startedAt = new Date(value);
                        break;
                    case 'resumedAt':
                        newTimer.resumedAt = new Date(value);
                        break;
                    case 'pausedAt':
                        newTimer.pausedAt = new Date(value);
                        break;
                    case 'isRunning':
                        newTimer.isRunning = value;
                        break;
                    case 'tags':
                        newTimer.tags = value;
                        break;
                }
            }
            imported.push(newTimer);
        }
        if (imported.length === 0) {
            return;
        }
        this.timers = imported;
    }
}

class TimerEditModal extends obsidian.Modal {
    constructor(plugin, timer) {
        super(plugin.app);
        this.plugin = plugin;
        this.timer = timer;
    }
    onOpen() {
        this.contentEl.empty();
        this.contentEl.createEl('h2', {
            text: `Edit timer ${this.timer.id} duration`,
            cls: ['time-tracker-modal-title']
        });
        const duration = this.timer.getFormattedDurationObject();
        const form = this.contentEl.createEl('form');
        form.onsubmit = this.onTimerEdit.bind(this);
        form.addClass('time-tracker-edit');
        this.hoursInput = new obsidian.TextComponent(form);
        this.hoursInput.setValue(duration.hours.toString());
        this.hoursInput.inputEl.type = 'number';
        this.hoursInput.inputEl.setAttribute('min', '0');
        this.hoursInput.inputEl.setAttribute('max', '24');
        this.hoursInput.inputEl.focus();
        form.createSpan({
            text: ':'
        });
        this.minutesInput = new obsidian.TextComponent(form);
        this.minutesInput.setValue(duration.minutes.toString());
        this.minutesInput.inputEl.type = 'number';
        this.minutesInput.inputEl.setAttribute('min', '0');
        this.minutesInput.inputEl.setAttribute('max', '59');
        form.createSpan({
            text: ':'
        });
        this.secondsInput = new obsidian.TextComponent(form);
        this.secondsInput.setValue(duration.seconds.toString());
        this.secondsInput.inputEl.type = 'number';
        this.secondsInput.inputEl.setAttribute('min', '0');
        this.secondsInput.inputEl.setAttribute('max', '59');
        const commandContainer = form.createDiv({ cls: ['time-tracker-modal-commands'] });
        new obsidian.ButtonComponent(commandContainer)
            .setButtonText('edit');
    }
    onTimerEdit(event) {
        event.stopPropagation();
        const hours = parseInt(this.hoursInput.getValue().trim() || '0');
        const minutes = parseInt(this.minutesInput.getValue().trim() || '0');
        const seconds = parseInt(this.secondsInput.getValue().trim() || '0');
        this.timer.setDuration(seconds + (minutes * 60) + (hours * 60 * 60));
        this.close();
    }
}

const VIEW_TYPE_OUTPUT = 'time-tracker';
class TimerView extends obsidian.ItemView {
    constructor(leaf, plugin) {
        super(leaf);
        this.plugin = plugin;
    }
    getViewType() {
        return VIEW_TYPE_OUTPUT;
    }
    getDisplayText() {
        return 'Time Tracker';
    }
    getIcon() {
        return 'clock';
    }
    onOpen() {
        return __awaiter(this, void 0, void 0, function* () {
            const { containerEl } = this;
            containerEl.empty();
            const table = containerEl.createEl('table');
            table.addClass('time-tracker-table');
            this.timerTable = table.createTBody();
            this.refreshTimerList();
            this.registerInterval(window.setInterval(this.refreshTimerList.bind(this), 1000));
        });
    }
    refreshTimerList() {
        this.timerTable.empty();
        const timers = this.plugin.timeManager.getAll();
        if (timers.length === 0) {
            const row = this.timerTable.createEl('tr');
            row.createEl('td', {
                text: 'no active timers',
                attr: {
                    'col-span': '3'
                },
                cls: ['time-tracker-table-no-timers']
            });
            return;
        }
        for (const timer of timers) {
            const row = this.timerTable.createEl('tr');
            row.createEl('td', {
                text: timer.id,
                cls: ['time-tracker-table-id']
            });
            row.createEl('td', {
                text: timer.getFormattedDurationString(),
                cls: ['time-tracker-table-time']
            }).addClass('timer-view');
            const commandContainer = row.createEl('td', {
                cls: ['time-tracker-table-commands']
            });
            if (timer.isRunning) {
                new obsidian.ButtonComponent(commandContainer)
                    .setIcon('time-tracker-pause').setTooltip('Pause Timer')
                    .onClick(() => {
                    timer.pause();
                    this.refreshTimerList();
                });
            }
            else {
                new obsidian.ButtonComponent(commandContainer)
                    .setIcon('time-tracker-resume').setTooltip('Start Timer')
                    .onClick(() => {
                    timer.resume();
                    this.refreshTimerList();
                });
            }
            new obsidian.ButtonComponent(commandContainer)
                .setIcon('pencil').setTooltip('Edit Timer')
                .onClick(() => {
                timer.pause();
                this.refreshTimerList();
                new TimerEditModal(this.plugin, timer).open();
            });
            new obsidian.ButtonComponent(commandContainer)
                .setIcon('time-tracker-stop').setTooltip('Stop Timer')
                .onClick(() => {
                timer.save();
                this.refreshTimerList();
            });
            new obsidian.ButtonComponent(commandContainer)
                .setIcon('trash').setTooltip('Delete Timer')
                .onClick(() => {
                this.plugin.timeManager.deleteById(timer.id);
                this.refreshTimerList();
            });
        }
    }
}

class TimerWidget {
    constructor(plugin, el) {
        this.plugin = plugin;
        this.el = el;
        this.plugin.timeManager.on('timer-start', this.refreshTimerControl.bind(this));
        this.plugin.timeManager.on('timer-paused', this.refreshTimerControl.bind(this));
        this.plugin.timeManager.on('timer-resumed', this.refreshTimerControl.bind(this));
        this.plugin.timeManager.on('timer-reset', this.refreshTimerControl.bind(this));
        this.plugin.timeManager.on('timer-deleted', this.refreshTimerControl.bind(this));
        this.plugin.timeManager.on('timer-edited', this.refreshTimerControl.bind(this));
        this.el.addEventListener('tick', this.refreshTimerView.bind(this));
    }
    setType(name) {
        this.externalTypeName = name;
        return this;
    }
    setIdentifier(identifier) {
        this.el.dataset.identifier = identifier;
        this.el.empty();
        this.identifier = identifier;
        return this;
    }
    showTimerView() {
        this.timerView = this.el.createSpan({ cls: ['timer-view'] });
        this.refreshTimerView();
        return this;
    }
    refreshTimerView() {
        if (!this.timerView) {
            return;
        }
        const timer = this.plugin.timeManager.getById(this.identifier);
        if (!timer) {
            this.timerView.setText('00:00:00');
            return;
        }
        this.timerView.setText(timer.getFormattedDurationString());
    }
    showTimerControl() {
        this.timerControlContainer = this.el.createDiv({ cls: ['timer-control'] });
        this.refreshTimerControl();
        return this;
    }
    refreshTimerControl() {
        if (!this.timerControlContainer) {
            return;
        }
        this.timerControlContainer.empty();
        const timer = this.plugin.timeManager.getById(this.identifier);
        if (timer) {
            new obsidian.ButtonComponent(this.timerControlContainer)
                .setIcon('trash').setTooltip('Delete Timer')
                .onClick(() => {
                this.plugin.timeManager.deleteById(timer.id);
                this.refreshTimerView();
            });
            new obsidian.ButtonComponent(this.timerControlContainer)
                .setIcon('pencil').setTooltip('Edit Timer')
                .onClick(() => {
                timer.pause();
                this.refreshTimerView();
                new TimerEditModal(this.plugin, timer).open();
            });
            new obsidian.ButtonComponent(this.timerControlContainer)
                .setIcon('time-tracker-stop').setTooltip('Stop Timer')
                .onClick(() => {
                timer.save();
                this.refreshTimerView();
            });
            if (timer.isRunning) {
                new obsidian.ButtonComponent(this.timerControlContainer)
                    .setIcon('time-tracker-pause').setTooltip('Pause Timer')
                    .onClick(() => {
                    timer.pause();
                    this.refreshTimerView();
                });
            }
            else {
                new obsidian.ButtonComponent(this.timerControlContainer)
                    .setIcon('time-tracker-resume').setTooltip('Start Timer')
                    .onClick(() => {
                    timer.resume();
                    this.refreshTimerView();
                });
            }
        }
        else {
            new obsidian.ButtonComponent(this.timerControlContainer)
                .setIcon('time-tracker-play').setTooltip('Start Timer')
                .onClick(() => {
                const timer = this.plugin.timeManager.createNew(this.identifier);
                if (this.externalTypeName) {
                    timer.addTag(this.externalTypeName);
                }
                timer.start();
                this.refreshTimerView();
            });
        }
        new obsidian.ButtonComponent(this.timerControlContainer)
            .setIcon('clock').setTooltip('Store Time')
            .onClick(() => {
            const pomodoro = this.plugin.timeManager.createNewPomodoro(this.identifier, this.plugin.settings.pomodoroDuration);
            if (this.externalTypeName) {
                pomodoro.addTag(this.externalTypeName);
            }
            pomodoro.save();
        });
    }
}

class FileStorage {
    constructor(plugin) {
        this.plugin = plugin;
    }
    getStorageFilePath() {
        const { settings } = this.plugin;
        return settings.storageFile.endsWith('.md') ? settings.storageFile : `${settings.storageFile}.md`;
    }
    getStorageFile() {
        const { vault } = this.plugin.app;
        const filePath = this.getStorageFilePath();
        return vault.getFiles().find(file => file.path === filePath);
    }
    formatTimerData(timer) {
        const { settings } = this.plugin;
        const duration = timer.getApproximatedDuration(settings.approximation);
        return timer.id + ': `' + timer.getFormattedDurationString(duration) + '`';
    }
    formatHeader() {
        const todayDate = (new Date()).toISOString().substr(0, 10);
        return `## ${todayDate}`;
    }
    save(timer) {
        return __awaiter(this, void 0, void 0, function* () {
            const { vault } = this.plugin.app;
            const filePath = this.getStorageFilePath();
            const header = this.formatHeader();
            const data = this.formatTimerData(timer);
            let file = this.getStorageFile();
            if (file) {
                const content = yield vault.read(file);
                let newContent = content.toString();
                if (!content.contains(header)) {
                    if (content.trim().length > 0) {
                        newContent += os__namespace.EOL + os__namespace.EOL;
                    }
                    newContent += header + os__namespace.EOL;
                }
                yield vault.modify(file, newContent + os__namespace.EOL + data);
            }
            else {
                file = yield vault.create(filePath, header + os__namespace.EOL + os__namespace.EOL + data);
            }
        });
    }
}

class TimerModal extends obsidian.FuzzySuggestModal {
    constructor(plugin) {
        super(plugin.app);
        this.plugin = plugin;
    }
    getItems() {
        return this.plugin.timeManager.getAll();
    }
    getItemText(timer) {
        return `${timer.id} ${timer.getFormattedDurationString()}`;
    }
}
class StartTimerModal extends TimerModal {
    onChooseItem(timer) {
        if (timer.isRunning) {
            new obsidian.Notice(`Timer ${timer.id} is already running`);
            return;
        }
        timer.start();
        new obsidian.Notice(`Timer ${timer.id} started`);
    }
}
class PauseTimerModal extends TimerModal {
    onChooseItem(timer) {
        if (!timer.isRunning) {
            new obsidian.Notice(`Timer ${timer.id} is not running`);
            return;
        }
        timer.pause();
        new obsidian.Notice(`Timer ${timer.id} paused`);
    }
}
class DeleteTimerModal extends TimerModal {
    onChooseItem(timer) {
        timer.timerManager.deleteById(timer.id);
        new obsidian.Notice(`Timer ${timer.id} deleted`);
    }
}
class SaveTimerModal extends TimerModal {
    onChooseItem(timer) {
        timer.save();
    }
}
class EditTimerModal extends TimerModal {
    onChooseItem(timer) {
        timer.pause();
        new TimerEditModal(this.plugin, timer).open();
    }
}

class NewTimerModal extends obsidian.Modal {
    constructor(plugin) {
        super(plugin.app);
        this.plugin = plugin;
    }
    onOpen() {
        this.contentEl.empty();
        this.contentEl.createEl('h2', {
            text: 'Start a new timer',
            cls: ['time-tracker-modal-title']
        });
        const form = this.contentEl.createEl('form');
        let identifier = '';
        new obsidian.Setting(form)
            .setName('Identifier')
            .setDesc('It must be unique')
            .addText(text => text
            .setValue(identifier)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            identifier = value;
        }))
            .inputEl
            .focus());
        const commandContainer = form.createDiv({ cls: ['time-tracker-modal-commands'] });
        const btnSave = new obsidian.ButtonComponent(commandContainer)
            .setButtonText('start');
        // eslint-disable-next-line @typescript-eslint/no-this-alias
        const modal = this;
        form.onsubmit = function (event) {
            event.stopPropagation();
            if (identifier.trim().length === 0) {
                return;
            }
            btnSave.setDisabled(true);
            try {
                const timer = modal.plugin.timeManager.createNew(identifier);
                timer.start();
            }
            finally {
                btnSave.setDisabled(false);
            }
            modal.close();
        };
    }
}

const NO_TIMER_RUNNING_LABEL = 'no running timer';
const EVENT_BUS_NAME = 'time-tracker-event-bus';
class TimerTrackerPlugin extends obsidian.Plugin {
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.loadSettings();
            this.addSettingTab(new TimeTrackerIssueSettingTab(this.app, this));
            this.initFileStorage();
            this.initTimerManager();
            yield this.loadTimers();
            this.registerMarkdownCodeBlockProcessor('timetracker', this.timerBlockProcessor.bind(this));
            this.registerMarkdownPostProcessor(this.postProcessor.bind(this));
            this.registerView(VIEW_TYPE_OUTPUT, (leaf) => {
                this.timerView = new TimerView(leaf, this);
                return this.timerView;
            });
            this.addCommand({
                id: 'app:show-timers',
                name: 'Show timers',
                callback: () => this.initLeaf(),
                hotkeys: []
            });
            this.addCommand({
                id: 'app:start-timer',
                name: 'Start timer',
                callback: () => {
                    new StartTimerModal(this).open();
                },
                hotkeys: []
            });
            this.addCommand({
                id: 'app:pause-all-timers',
                name: 'Pause all timers',
                callback: () => this.timeManager.pauseAll(),
                hotkeys: []
            });
            this.addCommand({
                id: 'app:pause-timer',
                name: 'Pause timer',
                callback: () => {
                    new PauseTimerModal(this).open();
                },
                hotkeys: []
            });
            this.addCommand({
                id: 'app:delete-all-timers',
                name: 'Delete all timers',
                callback: () => this.timeManager.deleteAll(),
                hotkeys: []
            });
            this.addCommand({
                id: 'app:delete-timer',
                name: 'Delete timer',
                callback: () => {
                    new DeleteTimerModal(this).open();
                },
                hotkeys: []
            });
            this.addCommand({
                id: 'app:save-timer',
                name: 'Save timer',
                callback: () => {
                    new SaveTimerModal(this).open();
                },
                hotkeys: []
            });
            this.addCommand({
                id: 'app:new-timer',
                name: 'New timer',
                callback: () => {
                    new NewTimerModal(this).open();
                },
                hotkeys: []
            });
            this.addCommand({
                id: 'app:edit-timer',
                name: 'Edit timer',
                callback: () => {
                    new EditTimerModal(this).open();
                },
                hotkeys: []
            });
            this.initStatusBar();
            this.registerInterval(window.setInterval(() => {
                this.refreshStatusBar();
                window.document.querySelectorAll('.timer-control-container.has-timer-view')
                    .forEach(timeWidget => timeWidget.dispatchEvent(new CustomEvent('tick')));
            }, 1000));
        });
    }
    initStatusBar() {
        if (!this.settings.enableStatusBar) {
            if (this.statusBarItem) {
                this.statusBarItem.remove();
                this.statusBarItem = null;
            }
            return;
        }
        if (this.statusBarItem) {
            return;
        }
        this.statusBarItem = this.addStatusBarItem();
        this.statusBarItem.addClass('timer-view-status-bar');
    }
    initLeaf() {
        const { workspace } = this.app;
        if (workspace.getLeavesOfType(VIEW_TYPE_OUTPUT).length > 0) {
            return;
        }
        const leaf = workspace.getRightLeaf(false);
        if (!leaf) {
            return;
        }
        leaf.setViewState({
            type: VIEW_TYPE_OUTPUT,
            active: true
        });
    }
    initFileStorage() {
        this.fileStorage = new FileStorage(this);
    }
    initTimerManager() {
        this.timeManager = new TimerManager();
        this.timeManager.on('timer-start', this.saveTimers.bind(this));
        this.timeManager.on('timer-paused', this.saveTimers.bind(this));
        this.timeManager.on('timer-resumed', this.saveTimers.bind(this));
        this.timeManager.on('timer-reset', this.saveTimers.bind(this));
        this.timeManager.on('timer-deleted', this.saveTimers.bind(this));
        this.timeManager.on('timer-edited', this.saveTimers.bind(this));
        this.timeManager.on('timer-saved', this.onTimerSave.bind(this));
        window.timeTrackerEventBus = document.createComment(EVENT_BUS_NAME);
        window.timeTrackerEventBus.addEventListener('timersaved', this.onTimerSaved.bind(this));
    }
    refreshStatusBar() {
        if (!this.statusBarItem) {
            return;
        }
        const runningTimer = this.timeManager.getRunningTimer();
        if (!runningTimer) {
            this.statusBarItem.innerHTML = NO_TIMER_RUNNING_LABEL;
            return;
        }
        this.statusBarItem.empty();
        this.statusBarItem.createSpan({
            text: runningTimer.id
        });
        this.statusBarItem.createSpan({
            text: runningTimer.getFormattedDurationString()
        }).addClass('timer-view');
    }
    timerBlockProcessor(content, el) {
        return __awaiter(this, void 0, void 0, function* () {
            el.empty();
            el.addClasses(['timer-control-container', 'has-timer-view']);
            new TimerWidget(this, el)
                .setIdentifier(content.replace(new RegExp(os__namespace.EOL, 'g'), ''))
                .showTimerView()
                .showTimerControl();
        });
    }
    postProcessor(el) {
        const issueBlocks = Array.from(el.querySelectorAll('.timer-tracker-compatible'));
        if (!issueBlocks.length) {
            return;
        }
        for (const issueBlock of issueBlocks) {
            const identifier = issueBlock.getAttribute('data-identifier');
            if (!identifier) {
                continue;
            }
            const typeName = issueBlock.getAttribute('data-type');
            if (!typeName) {
                continue;
            }
            const timerWidget = issueBlock.parentElement.createDiv({ cls: ['timer-control-container'] });
            new TimerWidget(this, timerWidget)
                .setIdentifier(identifier)
                .setType(typeName)
                .showTimerControl();
        }
    }
    onTimerSave(event) {
        const { timer } = event;
        if (timer.hasTag('jira') && window.jiraEventBus) {
            window.jiraEventBus.dispatchEvent(new CustomEvent('timersave', {
                detail: {
                    id: timer.id,
                    duration: timer.getApproximatedDuration(this.settings.approximation),
                    startedAt: timer.startedAt,
                    tags: timer.tags
                }
            }));
            // this.onTimerSaved will be fired by jira plugin
            return;
        }
        if (timer.hasTag('redmine') && window.redmineEventBus) {
            window.redmineEventBus.dispatchEvent(new CustomEvent('timersave', {
                detail: {
                    id: timer.id,
                    duration: timer.getApproximatedDuration(this.settings.approximation),
                    startedAt: timer.startedAt,
                    tags: timer.tags
                }
            }));
            // this.onTimerSaved will be fired by redmine plugin
            return;
        }
        this.fileStorage.save(timer).then(() => {
            if (timer.hasTag('pomodoro')) {
                new obsidian.Notice(`Pomodoro saved to file '${this.settings.storageFile}'`);
            }
            else {
                new obsidian.Notice(`Timer saved to file '${this.settings.storageFile}'`);
            }
            this.onTimerSaved({
                detail: {
                    id: timer.id,
                    tags: timer.tags
                }
            });
        });
    }
    onTimerSaved(event) {
        if (event.detail.tags.includes('pomodoro')) {
            return;
        }
        this.timeManager.deleteById(event.detail.id);
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            let data = yield this.loadData();
            data = data || { settings: {} };
            this.settings = Object.assign({}, DEFAULT_SETTINGS, data.settings || {});
        });
    }
    loadTimers() {
        return __awaiter(this, void 0, void 0, function* () {
            let data = yield this.loadData();
            data = data || { timers: [] };
            if (data.timers.length === 0) {
                return;
            }
            this.timeManager.restore(data.timers);
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData({
                settings: this.settings,
                timers: this.timeManager.dump()
            });
            this.initStatusBar();
        });
    }
    saveTimers() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData({
                settings: this.settings,
                timers: this.timeManager.dump()
            });
        });
    }
    onunload() {
        delete window.timeTrackerEventBus;
    }
}

module.exports = TimerTrackerPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
